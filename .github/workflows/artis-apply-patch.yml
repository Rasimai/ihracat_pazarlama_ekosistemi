name: Artis Apply Patch

on:
  workflow_dispatch:
    inputs:
      patch:
        description: "Unified diff (patch) content (plain text). Leave empty if using patch_b64."
        required: false
        type: string
      patch_b64:
        description: "Unified diff (Base64-encoded). Preferred for reliability."
        required: false
        type: string
      branch:
        description: "Target branch (will be created/updated)"
        required: true
        default: "artis/update-${{ github.run_id }}"
        type: string
      commit_message:
        description: "Commit message"
        required: true
        default: "chore: apply patch via Artis"
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Prepare branch
        run: |
          set -e
          BRANCH="${{ github.event.inputs.branch }}"
          git checkout -B "$BRANCH"

      - name: Write patch file (supports plain or Base64)
        env:
          PATCH_PLAIN: ${{ github.event.inputs.patch }}
          PATCH_B64: ${{ github.event.inputs.patch_b64 }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, base64, pathlib, sys
          plain = os.environ.get('PATCH_PLAIN', '') or ''
          b64 = os.environ.get('PATCH_B64', '') or ''
          if b64.strip():
              try:
                  content = base64.b64decode(b64).decode('utf-8')
              except Exception as e:
                  print("Failed to decode Base64 patch:", e, file=sys.stderr)
                  sys.exit(1)
          else:
              content = plain
          p = pathlib.Path('changes.patch')
          p.write_text(content, encoding='utf-8')
          print('Patch length:', len(content))
          if len(content.strip()) == 0:
              print('Empty patch', file=sys.stderr)
              sys.exit(1)
          PY

      - name: Apply patch
        run: |
          set -e
          git apply --whitespace=fix changes.patch

      - name: Commit
        run: |
          set -e
          git config user.name "artis-bot"
          git config user.email "artis-bot@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "${{ github.event.inputs.commit_message }}"

      - name: Push with PAT
        env:
          PAT: ${{ secrets.ARTIS_PAT }}
        run: |
          set -e
          BRANCH="${{ github.event.inputs.branch }}"
          git push "https://x-access-token:${PAT}@github.com/${{ github.repository }}.git" HEAD:"$BRANCH"

      - name: Open or ensure PR exists
        uses: actions/github-script@v7
        env:
          BRANCH: ${{ github.event.inputs.branch }}
          TITLE: ${{ github.event.inputs.commit_message }}
        with:
          github-token: ${{ secrets.ARTIS_PAT }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const head = process.env.BRANCH;
            const base = "main";
            const title = process.env.TITLE;
            // If no commits (previous step exited 0 with no commit), skip PR creation gracefully
            try {
              const { data: prs } = await github.rest.pulls.list({ owner, repo, state: "open", head: `${owner}:${head}` });
              if (prs.length > 0) {
                core.info(`PR already exists: #${prs[0].number}`);
              } else {
                const created = await github.rest.pulls.create({ owner, repo, head, base, title, body: "Automated change by Artis" });
                core.info(`PR created: #${created.number}`);
              }
            } catch (e) {
              core.warning(`PR step warning: ${e.message}`);
            }
